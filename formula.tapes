set (alignsummands : 0.0).  // for now these have to be float
set (oldalignment : 0.0).
set (zerolenids : 0.0).

set (wrap_trace_ids : 1.0).

set (rounded_wires : 1.0).
set (join_wires : 1.0).
set (otimesdist : 0.5).
set (oplusdist : 0.25).
set (paddingdist : 0.5).
set (scalex : 0.7).

let non_inv_example : term = gen(f, A, B) * gen (g, C, D).
let inv_example : term = (id(A) * s*(C, B) * id(D)) ; (gen(f, A*B, 1) * gen (g, C*D, 1)).

// draw non_inv_example to "non_inv".
// draw inv_example to "inv".

// let A : sort.   let B : sort.   let C : sort.
// let f : A -> C * C * C.

set (rounded_wires : 0.0).

let factorial : term = 

BEGIN_IMP [x : int, y : int]
y := x;
while (geq1(y)) {
    y := (dec(x) : int);
    x := (times(x, y) : int)
}
END_IMP.


check factorial.
draw factorial to "./result_examples/factorio".

set (scalex : 0.9).
set (rounded_wires : 1.0).

let big_test_sum : term = (split(A*A);((split(A*A) ; ((gen(f, A * A, A) + gen(g, A * A, B * C)) ; (copy(A + (B*C))))) +
    (split(A*A) ; ((gen(f, A * A, A) + gen(g, A * A, B * C)) ;  (copy(A + (B*C))))))) + 
    (( split(A) ; ((gen(f, A, A) ; (id(A) + spawn(A) + spawn(A) + spawn(A))) + id(A)) ) ; ((id(A) + cut(A)) + cut(A) + cut(A) + id(A)) ; join(A)).

set (rounded_wires : 0.0).


draw_normal_form big_test_sum to "./result_examples/big_test_matrix".


set (rounded_wires : 0.0).

draw_circuit discard(A) * (copy(A) ; (discard(A) * id(A) ; (gen(pos, 1, A) * discard(A)))) to "./result_examples/test_circuit".

set (zerolenids : 1.0).
set (scalex : 0.5).
set (otimesdist : 0.6).
set (oplusdist : 0.25).
set (paddingdist : 0.5).

draw discard(X) ; codiscard (X) to "should_be_true"

// draw split(U) ; ((split(U) ; (gen(c, U, V) +  gen(c, U, V)) ; join(V)) + gen(d, U, V)) ; join(V) to "example1".

// draw (split(U) ; ((split(U) ; (gen(c, U, V) +  gen(c, U, V)) ; join(V)) + gen(d, U, V)) ; join(V)) ; 
//      (split(V) ; (gen(e, U, V) + (split(U) ; (gen(e, U, V) +  gen(f, U, V)) ; join(V))) ; join(V)) to "example2"

// draw of_relation op(star(intersection (gen(R, A, A), gen(S, A, A)))) ; union (gen(R, A, A), gen(S, A, A)) to "union"

// set (rounded_wires : 1.0).

// draw(invert(gen(R, int*int*int*int, int*int))) to "test_invert"