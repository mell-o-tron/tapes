set (alignsummands : 0.0).  // for now these have to be float
set (oldalignment : 0.0).
set (zerolenids : 1.0).

set (wrap_trace_ids : 1.0).

set (rounded_wires : 1.0).
set (join_wires : 1.0).
set (otimesdist : 0.5).
set (oplusdist : 0.25).
set (paddingdist : 0.5).
set (scalex : 0.7).


let A : sort.   let B : sort.   let C : sort.
let f : A -> C * C * C.


let program : term = 

BEGIN_IMP [x : int]
// while (r(x)) {
    if (r1(x)) then {
        x := (f(x) : int)
    } else {
        abort
    }
// }
END_IMP.

check program.
draw program to "./result_examples/program".

set (rounded_wires : 0.0).

let factorial : term = 

BEGIN_IMP [x : int, y : int]
y := x;
while (">1"(y)) {
    y := ("-1"(x) : int);
    x := ("\times"(x, y) : int)
}
END_IMP.

check factorial.
draw factorial to "./result_examples/factorial".

set (scalex : 0.9).
set (rounded_wires : 1.0).

let matrix_example : term = 
    ((split(U1) ; (split(U1) + split(U1)) ; (gen(c1, U1, V1) + gen(c2, U1, V1) + gen(c3, U1, V2) + gen(c4, U1, V3))) +
    (split(U2) ; (cut(U2) + (split(U2) ; (gen(c5, U2, V2) + cut(U2)))); (spawn(V1) + id(V2) + spawn(V3)))) ;
    (join(V1) + id(V2) + s+(V3, V1) + id(V2) + id(V3)) ; (id(V1) + s+(V2, V1) + s+(V2, V3) + id(V3));
    (join(V1) + join(V2) + join(V3)).

let big_test_sum : term = (split(A*A);((split(A*A) ; ((gen(f, A * A, A) + gen(g, A * A, B * C)) ; (copy(A + (B*C))))) +
    (split(A*A) ; ((gen(f, A * A, A) + gen(g, A * A, B * C)) ;  (copy(A + (B*C))))))) + 
    (( split(A) ; ((gen(f, A, A) ; (id(A) + spawn(A) + spawn(A) + spawn(A))) + id(A)) ) ; ((id(A) + cut(A)) + cut(A) + cut(A) + id(A)) ; join(A)).

draw_matrix matrix_example to "./result_examples/matrix".
draw_matrix big_test_sum to "./result_examples/big_test_matrix"